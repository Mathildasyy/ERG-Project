??bs
??bs()
?bs()
# NOT RUN {
require(stats); require(graphics)
bs(women$height, df = 5)
summary(fm1 <- lm(weight ~ bs(height, df = 5), data = women))
## example of safe prediction
plot(women, xlab = "Height (in)", ylab = "Weight (lb)")
ht <- seq(57, 73, length.out = 200)
lines(ht, predict(fm1, data.frame(height = ht)))
# }
library(graphics)
library(stats)
bs(women$height, df = 5)
summary(fm1 <- lm(weight ~ bs(height, df = 5), data = women))
## example of safe prediction
plot(women, xlab = "Height (in)", ylab = "Weight (lb)")
ht <- seq(57, 73, length.out = 200)
lines(ht, predict(fm1, data.frame(height = ht)))
install.packages('splines')
library(splines)
library(splines)
bs(women$height, df = 5)
summary(fm1 <- lm(weight ~ bs(height, df = 5), data = women))
## example of safe prediction
plot(women, xlab = "Height (in)", ylab = "Weight (lb)")
ht <- seq(57, 73, length.out = 200)
lines(ht, predict(fm1, data.frame(height = ht)))
women$height
?bs()
lm(SalePrice ~ bs(LotFrontage, df = 5), data = train)
plot(fm1 <- lm(SalePrice ~ bs(LotFrontage, df = 5), data = train))
fm1 <- lm(SalePrice ~ bs(LotFrontage, df = 5), data = train))
plot(fml)
fm1 <- lm(SalePrice ~ bs(LotFrontage, df = 5), data = train))
plot(fm1)
fm1 <- lm(SalePrice ~ bs(LotFrontage, df = 5), data = train)
plot(fm1)
View(fm1)
fm1
bs(LotFrontage, df = 5)
bs(train$LotFrontage, df = 5)
bs(women$height, df = 5)
length(women$height)
9.110787e-02^2
bs(women$height, df = 5) +
women$height
women$height
bs(women$height, df = 5)
plot(SalePrice ~ bs(LotFrontage, df = 5), data = train))
plot(SalePrice ~ bs(LotFrontage, df = 5), data = train)
bs <- bs(women$height, df = 5)
sum(bs[2,])
bs(women$height, df = 5)
summary(women$height)
women$height
plot(women$height)
hist(women$height)
boxplot(women$height)
b <- bs(women$height, df = 5)
b1 <- b[, 1]  ## basis 1
b2 <- b[, 2]  ## basis 2
b3 <- b[,3]
par(mfrow = c(1, 3))
plot(x, b1, type = "l", main = "basis 1: b1")
plot(x, b2, type = "l", main = "basis 2: b2")
plot(x, b3, type = "l", main = "basis 3: b3")
plot(women$height, b1, type = "l", main = "basis 1: b1")
plot(women$height, b2, type = "l", main = "basis 1: b2")
plot(women$height, b3, type = "l", main = "basis 1: b3")
bknots <- attr(b,"Boundary.knots")
iknots <- attr(b,"knots")
knots <- c(bknots[1],iknots,bknots[2])
y1 <- c(0,1,0,0)
y2 <- c(0,0,1,0)
y3 <- c(0,0,0,1)
par(mfrow = c(1, 3))
plot(knots, y1, type = "l", main = "basis 1: b1")
plot(knots, y2, type = "l", main = "basis 2: b2")
plot(knots, b3, type = "l", main = "basis 3: b3")
plot(knots, y3, type = "l", main = "basis 2: b3")
y <- rep(0,dim(b)[2])
b
y1 <- y[2]=1
y1 <- c(y[1],1,y[3:])
y[2] = 1
y1 <- rep(0,5)
y1[2] = 1
del(y)
y1 <- rep(0,5)y1[2] = 1
y2 <- rep(0,5)
+ y2[3] = 1
y2 <- rep(0,5)
y2[3] = 1
y3 <- c(0,0,1,0)
y4 <- c(0,0,0,1)
par(mfrow = c(1,4))
plot(knots, y1, type = "l", main = "basis 1: b1")
bs(women$height, df = 5, degree = 3)
attr(b,basis)
ttr(b,'basis')
attr(b,'basis')
attr(b,'class')
women$height
dot(women$height)
par(mfrow = c(1,3))
plot(women$height,b[,1])
?plot
help("graphics-package")
library(help = "graphics")
spineplot(women$height)
spineplot(women$height,women$weight)
?spineplot
plot(women$height,b[,2])
?plot
par(mfrow = c(1,3))
plot(women$height,b[,1], ylim=c(0:1))
par(mfrow = c(1,2))
plot(women$height,b[,1], ylim=c(0:1))
plot(knots, y1, type = "l", main = "basis 1: b1")
y1 = c(0,1,0,0)
plot(knots, y1, type = "l", main = "basis 1: b1")
?plot
points(women$height)
plot(knots, y1, type = "l", main = "basis 1: b1")
points(women$height)
points(women$height, cex=.5, col='dark red')
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
plot(knots, y1, type = "l", main = "basis 1: b1")
points(knots <- women$height)
?points
par(mfrow = c(1,2))
> plot(women$height,b[,1], ylim=c(0:1))
> plot(knots, y1, type = "l", main = "basis 1: b1")
par(mfrow = c(1,2))
plot(women$height,b[,1], ylim=c(0:1))
plot(knots, y1, type = "l", main = "basis 1: b1")
knots <- c(attr(b,"Boundary.knots")[1],attr(b,"knots"),"Boundary.knots")[2])
knots <- c(attr(b,"Boundary.knots")[1],attr(b,"knots"),attr(b,"Boundary.knots")[2])
plot(knots, y1, type = "l", main = "basis 1: b1")
par(mfrow = c(1,2))
plot(women$height,b[,2], ylim=c(0:1))
plot(knots, y2, type = "l", main = "basis 1: b2")
y2 = c(0,0,1,0)
plot(knots, y2, type = "l", main = "basis 1: b2")
?boxplot
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
points(x, pr, col = "red", pch = 19, cex = 0.5))
}
plot.feature <- function(index,class){
ifelse(class = 'character', boxplot(SalePrice~., data = train, subset = c(index, 81)),
bsplot(index))
}
par(
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
points(x, pr, col = "red", pch = 19, cex = 0.5))
}
plot.feature <- function(index,class){
ifelse(class = 'character', boxplot(SalePrice~., data = train, subset = c(index, 81)),
bsplot(index))
}
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
points(x, pr, col = "red", pch = 19, cex = 0.5)
}
plot.feature <- function(index,class){
ifelse(class = 'character', boxplot(SalePrice~., data = train, subset = c(index, 81)),
bsplot(index))
}
plot.feature(2,'character')
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
points(x, pr, col = "red", pch = 19, cex = 0.5)
}
plot.feature <- function(index,class){
ifelse(class == 'character', boxplot(SalePrice~., data = train, subset = c(index, 81)),
bsplot(index))
}
plot.feature(2,'character')
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
points(x, pr, col = "red", pch = 19, cex = 0.5)
}
plot.feature <- function(index,class){
ifelse(class == 'character', boxplot(SalePrice~., data = train, subset = c(index)),
bsplot(index))
}
plot.feature(2,'character')
boxplot(SalePrice~., data = train, subset = c(2)
)
boxplot(SalePrice~., data = train, subset = c(4)
)
boxplot(SalePrice~., data = train[,c(4,81)])
View(train)
boxplot(SalePrice~., data = train[,c(3,81)])
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
points(x, pr, col = "red", pch = 19, cex = 0.5)
}
plot.feature <- function(index,class){
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(index,81)]),
bsplot(index))
}
plot.feature(2,class(train[,2]))
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
abline(x, pr, col = "red", pch = 19, cex = 0.5)
}
plot.feature <- function(index,class){
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(index,81)]),
bsplot(index))
}
plot.feature(2,class(train[,2]))
?pch
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
points(x, pr, col = "red", pch = 10, cex = 0.5)
}
plot.feature <- function(index,class){
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(index,81)]),
bsplot(index))
}
? for (variable in vector) {
}
for (i in 2:79){
plot.feature(i, class(train[,i]))
}
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
points(x, pr, col = "red", pch = 10, cex = 0.5)
}
plot.feature <- function(index,class){
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(index,81)]),
bsplot(index))
}
for (i in 2:79){
plot.feature(i, class(train[,i]))
}
for (i in c(2:79)){
plot.feature(i, class(train[,i]))
}
? for
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
points(x, pr, col = "red", pch = 10, cex = 0.5)
}
for (index in c(2:80)){
class <- class(train[,index])
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(index,81)]),
bsplot(index))
}
par()
for (index in 2:80){
class <- class(train[,index])
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(index,81)]),
bsplot(index))
}
for i in 1:79){
class <- feature.class[i]
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(i+1,81)]),
bsplot(i+1))
}
for (i in 1:79){
class <- feature.class[i]
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(i+1,81)]),
bsplot(i+1))
}
for (i in 1:79){
class <- feature.class[i]
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(i+1,81)]),
bsplot(i+1))
}
}
}
debugSource('~/Documents/GitHub/ERGProject/x000_DataPreprocess.r')
class <- feature.class[i]
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(i+1,81)]),
bsplot(i+1))
class <- feature.class[2]
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(2,81)]),
bsplot(2))
bsplot <- function(index){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y)
points(x, pr, col = "red", pch = 10, cex = 0.5)
}
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(2,81)]),
+        bsplot(2))
text('s')
bsplot(2))
bsplot(2)
text('s')
bsplot <- function(index, title){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y, main = title)
points(x, pr, col = "red", pch = 10, cex = 0.5)
}
bsplot(2,names(train)[2])
?boxplot
bsplot <- function(index, title){
x <- train[,index]
y <- train$SalePrice
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y, main = title)
points(x, pr, col = "red", pch = 10, cex = 0.5)
}
feature.graphs <- function(){
for (i in 1:79){
class <- feature.class[i]
title <- names(train)[i+1]
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(i+1,81)], main = title),
bsplot(i+1, title))}
}
feature.graphs()
feature.graphs <- function(){
for (i in 1:10){
class <- feature.class[i]
title <- names(train)[i+1]
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(i+1,81)], main = title),
bsplot(i+1, title))}
}
feature.graphs()
feature.graphs <- function(){
for (i in 3:10){
class <- feature.class[i]
title <- names(train)[i+1]
ifelse(class == 'character', boxplot(SalePrice~., data = train[,c(i+1,81)], main = title),
bsplot(i+1, title))}
}
feature.graphs()
?if
feature.graphs <- function(){
for (i in 1:79){
class <- feature.class[i]
title <- names(train)[i+1]
if(class == 'character'){
boxplot(SalePrice~., data = train[,c(i+1,81)], main = title)
}else
bsplot(i+1, title))
}
}
feature.graphs()
feature.graphs <- function(){
for (i in 1:79){
class <- feature.class[i]
title <- names(train)[i+1]
if(class == 'character'){
boxplot(SalePrice~., data = train[,c(i+1,81)], main = title)
}else
bsplot(i+1, title)}
}
feature.graphs()
bsplot <- function(index, title){
x <- train[,index]
y <- train$SalePrice/1000
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y, main = title)
points(x, pr, col = "red", pch = 10, cex = 0.5)
}
par(mfrow = c(2,2))
feature.graphs <- function(){
for (i in 1:79){
class <- feature.class[i]
title <- names(train)[i+1]
if(class == 'character'){
boxplot(SalePrice/1000~., data = train[,c(i+1,81)], main = title)
}else
bsplot(i+1, title)}
}
feature.graphs()
test <- read.csv('test.csv')
# import packages
library(ggplot2)
library(graphics)
library(splines)
# read data files
train <- read.csv('train.csv')
test <- read.csv('test.csv')
summary(train)
# Now, let's observe the training data
## First, we make a histogram of the sale prices
## It is obvious that the distribution is skewed to right
ggplot(train, aes(x = SalePrice/1000)) + # Measure the house prices in $1,000
geom_histogram(binwidth = 30)
#  We roughly abstract the class of each feature
feature.class <- c()
for (i in 2:80){
feature.class <- append(feature.class,class(train[,i]))
}
## To observe qualitative features, we use boxplots to idnetify outliers.
## To observe quantitative features, we draw basis-spline plots.
bsplot <- function(index, title){
x <- train[,index]
y <- train$SalePrice/1000
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y, main = title)
points(x, pr, col = "red", pch = 10, cex = 0.5)
}
## Set 2 by 2 canvas
par(mfrow = c(2,2))
# Then, we plot the numeric and non-numeric variables in different ways
feature.graphs <- function(){
for (i in 1:79){
class <- feature.class[i]
title <- names(train)[i+1]
if(class == 'character'){
boxplot(SalePrice/1000~., data = train[,c(i+1,81)], main = title)
}else
bsplot(i+1, title)}
}
# Before we start automatic generation, we have to manually re-classify the feature type
## Delete the hashtag before you name, and input a vector of the actual types
##sy<- c()
##hy<- c()
##hsq<- c()
##zqf<- c()
##feature.class[1:20] = sy
##feature.class[21:40] = hy
##feature.class[41:60] = hsq
##feature.class[61:79] = zqf
# generate 79 graphs
feature.graphs()
# import packages
library(ggplot2)
library(graphics)
library(splines)
# read data files
train <- read.csv('train.csv')
test <- read.csv('test.csv')
summary(train)
# Now, let's observe the training data
## First, we make a histogram of the sale prices
## It is obvious that the distribution is skewed to right
ggplot(train, aes(x = SalePrice/1000)) + # Measure the house prices in $1,000
geom_histogram(binwidth = 30)
#  We roughly abstract the class of each feature
feature.class <- c()
for (i in 2:80){
feature.class <- append(feature.class,class(train[,i]))
}
## To observe qualitative features, we use boxplots to idnetify outliers.
## To observe quantitative features, we draw basis-spline plots.
bsplot <- function(index, title){
x <- train[,index]
y <- train$SalePrice/1000
pr <- predict(lm(y ~ bs(x)), newdata = data.frame(x))
plot(x,y, main = title)
points(x, pr, col = "red", pch = 10, cex = 0.5)
}
## Set 2 by 2 canvas
par(mfrow = c(2,2))
# Then, we plot the numeric and non-numeric variables in different ways
feature.graphs <- function(subset.index){
for (i in subset.index){
class <- feature.class[i]
title <- names(train)[i+1]
if(class == 'character'){
boxplot(SalePrice/1000~., data = train[,c(i+1,81)], main = title)
}else
bsplot(i+1, title)}
}
# Before we start automatic generation, we have to manually re-classify the feature type
## Delete the hashtag before you name, and input a vector of the actual types
##sy<- c()
##hy<- c()
##hsq<- c()
##zqf<- c()
##feature.class[1:20] = sy
##feature.class[21:40] = hy
##feature.class[41:60] = hsq
##feature.class[61:79] = zqf
feature.subset <- 1:20
# generate 79 graphs
feature.graphs(feature.subset)
